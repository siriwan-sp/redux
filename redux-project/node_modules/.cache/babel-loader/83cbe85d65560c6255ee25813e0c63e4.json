{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\siriw\\\\OneDrive\\\\Desktop\\\\redux-advanc\\\\redux-advanced\\\\src\\\\components\\\\Shop\\\\ProductItem.js\",\n    _s = $RefreshSig$();\n\nimport { useDispatch } from \"react-redux\";\nimport { cartActions } from \"../../store/cart-slice\";\nimport Card from \"../UI/Card\";\nimport classes from \"./ProductItem.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductItem = props => {\n  _s();\n\n  const cart = useSelector(state => state.cart);\n  const dispatch = useDispatch();\n  const {\n    title,\n    price,\n    description,\n    id\n  } = props;\n\n  const addToCartHandler = () => {//     const newTotalQuantity = cart.totalQuantity + 1;\n    //     const updatedItems = cart.items.slice(); // create copy via slice to avoid mutating original state\n    //     const existingItem = updatedItems.find((item) => item.id === id);\n    //     if (existingItem) {\n    //       const updatedItem = { ...existingItem }; // new object + copy existing properties to avoid state mutation\n    //       updatedItem.quantity++;\n    //       updatedItem.totalPrice = updatedItem.totalPrice + price;\n    //       const existingItemIndex = updatedItems.findIndex(\n    //         (item) => item.id === id\n    //       );\n    //       updatedItems[existingItemIndex] = updatedItem;\n    //     } else {\n    //       updatedItems.push({\n    //         id: id,\n    //         price: price,\n    //         quantity: 1,\n    //         totalPrice: price,\n    //         name: title,\n    //       });\n    //     }\n    //     const newCart = {\n    //       totalQuantity: newTotalQuantity,\n    //       items: updatedItems,\n    //     };\n    //     dispatch(cartActions.replaceCart(newCart));\n    // and then send Http request\n    // fetch('firebase-url', { method: 'POST', body: JSON.stringify(newCart) })\n    // dispatch(\n    //   cartActions.addItemToCart({\n    //     id,\n    //     title,\n    //     price,\n    //   })\n    // );\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: classes.item,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.price,\n          children: [\"$\", price.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addToCartHandler,\n          children: \"Add to Cart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProductItem, \"ecWlw9hQmiN1BKXN3G5mczU/ZzA=\", true, function () {\n  return [useDispatch];\n});\n\n_c = ProductItem;\nexport default ProductItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductItem\");","map":{"version":3,"sources":["C:/Users/siriw/OneDrive/Desktop/redux-advanc/redux-advanced/src/components/Shop/ProductItem.js"],"names":["useDispatch","cartActions","Card","classes","ProductItem","props","cart","useSelector","state","dispatch","title","price","description","id","addToCartHandler","item","toFixed","actions"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AAEA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,OAAP,MAAoB,0BAApB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,IAAI,GAAGC,WAAW,CAAEC,KAAD,IAAWA,KAAK,CAACF,IAAlB,CAAxB;AACA,QAAMG,QAAQ,GAAGT,WAAW,EAA5B;AAEA,QAAM;AAAEU,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,WAAhB;AAA6BC,IAAAA;AAA7B,MAAoCR,KAA1C;;AAEA,QAAMS,gBAAgB,GAAG,MAAM,CAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAnCD;;AAqCA,sBACE;AAAI,IAAA,SAAS,EAAEX,OAAO,CAACY,IAAvB;AAAA,2BACE,QAAC,IAAD;AAAA,8BACE;AAAA,gCACE;AAAA,oBAAKL;AAAL;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAEP,OAAO,CAACQ,KAAxB;AAAA,0BAAiCA,KAAK,CAACK,OAAN,CAAc,CAAd,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA,kBAAIJ;AAAJ;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAK,QAAA,SAAS,EAAET,OAAO,CAACc,OAAxB;AAAA,+BACE;AAAQ,UAAA,OAAO,EAAEH,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAzDD;;GAAMV,W;UAEaJ,W;;;KAFbI,W;AA2DN,eAAeA,WAAf","sourcesContent":["import { useDispatch } from \"react-redux\";\n\nimport { cartActions } from \"../../store/cart-slice\";\nimport Card from \"../UI/Card\";\nimport classes from \"./ProductItem.module.css\";\n\nconst ProductItem = (props) => {\n  const cart = useSelector((state) => state.cart);\n  const dispatch = useDispatch();\n\n  const { title, price, description, id } = props;\n\n  const addToCartHandler = () => {\n    //     const newTotalQuantity = cart.totalQuantity + 1;\n    //     const updatedItems = cart.items.slice(); // create copy via slice to avoid mutating original state\n    //     const existingItem = updatedItems.find((item) => item.id === id);\n    //     if (existingItem) {\n    //       const updatedItem = { ...existingItem }; // new object + copy existing properties to avoid state mutation\n    //       updatedItem.quantity++;\n    //       updatedItem.totalPrice = updatedItem.totalPrice + price;\n    //       const existingItemIndex = updatedItems.findIndex(\n    //         (item) => item.id === id\n    //       );\n    //       updatedItems[existingItemIndex] = updatedItem;\n    //     } else {\n    //       updatedItems.push({\n    //         id: id,\n    //         price: price,\n    //         quantity: 1,\n    //         totalPrice: price,\n    //         name: title,\n    //       });\n    //     }\n    //     const newCart = {\n    //       totalQuantity: newTotalQuantity,\n    //       items: updatedItems,\n    //     };\n    //     dispatch(cartActions.replaceCart(newCart));\n    // and then send Http request\n    // fetch('firebase-url', { method: 'POST', body: JSON.stringify(newCart) })\n    // dispatch(\n    //   cartActions.addItemToCart({\n    //     id,\n    //     title,\n    //     price,\n    //   })\n    // );\n  };\n\n  return (\n    <li className={classes.item}>\n      <Card>\n        <header>\n          <h3>{title}</h3>\n          <div className={classes.price}>${price.toFixed(2)}</div>\n        </header>\n        <p>{description}</p>\n        <div className={classes.actions}>\n          <button onClick={addToCartHandler}>Add to Cart</button>\n        </div>\n      </Card>\n    </li>\n  );\n};\n\nexport default ProductItem;\n"]},"metadata":{},"sourceType":"module"}